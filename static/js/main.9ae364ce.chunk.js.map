{"version":3,"sources":["utils.js","features/question/question.store.jsx","components/Page.jsx","components/Button.jsx","components/Layout.jsx","pages/Home.jsx","pages/Questions.jsx","pages/Progress.jsx","Router.jsx","App.jsx","serviceWorker.js","index.js"],"names":["formatQuestionsFromMarkdown","parsed","htmlStr","mdMarkup","filter","p","type","tag","i","questions","hrCount","parseWhile","t","length","questionStart","questionEnd","slice","title","question","codeSnippets","push","shift","content","optionsEnd","findIndex","includes","descriptionEnd","answer","description","id","DOMParser","parseFromString","body","textContent","code","options","map","e","answerIndex","charCodeAt","comparator","optionClassName","answ","option","correct","scrollToTop","window","scrollTo","StateContext","createContext","DispatchContext","SET_QUESTIONS","SET_ANSWER","CLEAR","QUESTIONS_SOURCE_URL","QUESTIONS_ORIGINAL","QUESTIONS_IN_PROGRESS","questionReducer","produce","state","payload","find","q","userAnswerIndex","Error","QuestionProvider","children","useReducer","dispatch","useEffect","a","Promise","all","getQuestionsFromCash","then","questionsFromCash","catch","console","error","axios","get","data","isSetQuestionsFromCash","rawQuestions","questionsMd","Markdown","parse","formattedQuestions","log","localForage","setItem","Provider","value","useQuestionState","params","context","useContext","undefined","useQuestionsActions","useQuestionDispatch","useMemo","setQuestions","setAnswer","clear","init","getItem","useQuestion","questionsInProgress","originalQuestions","Page","styled","PageGroup","Button","CancelButton","Main","Home","PageTitle","CardGroup","Title","Description","rel","target","href","LinkGroup","LinkItem","to","onClick","Link","Actions","NavGroup","BtnGroup","CancelBtnGroup","QuestionGroup","QuestionStatsGroup","QuestionStats","Correct","QuestionNumber","QuestionBody","QuestionTitle","QuestionAnswerGroup","QuestionCodeGroup","Options","withRouter","history","match","questionList","questionActions","currentQuestionIndex","parseInt","isNil","onNextQuestion","useCallback","nextQuestionIndex","onPrevQuestion","prevQuestionIndex","onAnswer","reduce","acc","correctQuestionsCount","wrongQuestionsCount","index","key","className","o","source","escapeHtml","getStatus","Progress","React","pathname","Question","status","Router","basename","exact","path","component","Questions","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","process","ready","unregister","URL","origin","addEventListener","fetch","response","contentType","headers","indexOf","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9ae364ce.chunk.js","sourcesContent":["export function stripHtml(htmlStr) {\n  const doc = new DOMParser().parseFromString(htmlStr, 'text/html');\n  return doc.body.textContent || 'Parse error';\n}\n\nexport const formatQuestionsFromMarkdown = parsed => {\n  const mdMarkup = parsed\n    .filter(p => p.type === 'inline' || p.tag === 'code' || p.type === 'hr');\n\n  const HR = 'hr';\n  let i = 0;\n  const questions = [];\n\n  // Omit description and go to first question\n  let hrCount = 0;\n  parseWhile(t => {\n    if (t.tag !== HR) return true;\n    hrCount++;\n    if (hrCount >= 3) return false;\n    return true;\n  });\n\n  while (i < mdMarkup.length - 1) {\n    const questionStart = ++i;\n    const questionEnd = parseWhile(t => t.tag !== HR);\n    const [title, ...question] = mdMarkup.slice(questionStart, questionEnd);\n    const codeSnippets = [];\n\n    while (question[0] && question[0].tag === 'code') {\n      codeSnippets.push(question.shift().content);\n    }\n\n    const optionsEnd = question.findIndex(t => t.content.includes('<details><summary><b>Answer'));\n    const descriptionEnd = question.findIndex(t => t.content.includes('</p>'));\n    const answer = question[optionsEnd + 1];\n    const description = descriptionEnd > -1\n      ? question.slice(optionsEnd + 2, descriptionEnd)\n      : question.slice(optionsEnd + 2);\n\n    questions.push({\n      id: questions.length,\n      title: stripHtml(title.content),\n      code: codeSnippets,\n      answer: answer.content,\n      options: question.slice(0, optionsEnd).map(e => e.content),\n      answerIndex: answer.content.slice(-1).charCodeAt(0) - 65,\n      description: description.map(e => e.tag === 'code' ? e : e.content),\n    })\n  }\n\n  function parseWhile(comparator) {\n    while(comparator(mdMarkup[i]) && i < mdMarkup.length - 1) i++;\n    return i;\n  }\n\n  return questions;\n};\n\nexport const optionClassName = (answ, option, correct) => {\n  if (answ === null) {\n    return '';\n  }\n\n  if (option === correct) {\n    return 'correct';\n  }\n\n  if (option === answ) {\n    return 'wrong';\n  }\n};\n\nexport const isDev = () => process.env === 'development';\n\nexport const allSettled = promises => Promise.all(promises.map(promise => promise.catch(e => e)));\n\nexport const scrollToTop = () => window && window.scrollTo(0, 0);","import React, { createContext, useReducer, useContext, useMemo, useEffect } from 'react';\nimport localForage from 'localforage';\nimport Markdown from 'markdown-it';\nimport axios from 'axios';\nimport produce from 'immer';\n\nimport { formatQuestionsFromMarkdown } from '../../utils';\n\nconst StateContext = createContext();\nconst DispatchContext = createContext();\n\nconst SET_QUESTIONS = 'questions/set';\nconst SET_ANSWER = 'questions/answer/set';\nconst CLEAR = 'questions/clear';\n\nconst QUESTIONS_SOURCE_URL = 'https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/README.md';\n\nconst QUESTIONS_ORIGINAL = 'questions/original';\nconst QUESTIONS_IN_PROGRESS = 'questions/in-progress';\n\nconst questionReducer = produce(function questionReducer(state, { type, payload }) {\n  switch (type) {\n    case SET_QUESTIONS: return payload;\n    case CLEAR: return [];\n\n    case SET_ANSWER:\n      const question = state.find(q => q.id === payload.id);\n      if (question) {\n        question.userAnswerIndex = payload.answerIndex;\n      }\n      return state;\n\n    default:\n      throw new Error(`Unhandled action type: ${type}`);\n  }\n});\n\nfunction QuestionProvider({ children }) {\n  const [state, dispatch] = useReducer(questionReducer, []);\n\n  useEffect(() => {\n    (async () => {\n      const [\n        isSetQuestionsFromCash,\n        rawQuestions\n      ] = await Promise.all([\n        getQuestionsFromCash()\n          .then(questionsFromCash => {\n            dispatch({ type: SET_QUESTIONS, payload: questionsFromCash });\n            return true;\n          })\n          .catch(e => {\n            console.error(e);\n            return false;\n          }),\n\n        axios.get(QUESTIONS_SOURCE_URL)\n          .then(({ data }) => data)\n          .catch(e => {\n            console.error(e);\n            return false;\n          }),\n      ]);\n\n      if (!rawQuestions) return;\n\n      const questionsMd = (new Markdown()).parse(rawQuestions);\n      const formattedQuestions = formatQuestionsFromMarkdown(questionsMd);\n      \n      console.log('::store')\n\n      if (!isSetQuestionsFromCash) {\n        dispatch({ type: SET_QUESTIONS, payload: formattedQuestions })\n      }\n      \n      localForage.setItem(QUESTIONS_ORIGINAL, formattedQuestions);\n    })();\n  }, []);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nfunction useQuestionState(params) {\n  const context = useContext(StateContext);\n  if (context === undefined) {\n    throw new Error('useQuestionState must be used within a QuestionProvider');\n  }\n  return context;\n}\n\nfunction useQuestionDispatch(params) {\n  const context = useContext(DispatchContext);\n  if (context === undefined) {\n    throw new Error('useQuestionDispatch must be used within a QuestionProvider');\n  }\n  return context;\n}\n\nfunction useQuestionsActions() {\n  const dispatch = useQuestionDispatch();\n  return useMemo(() => ({\n    setQuestions: payload => dispatch({ type: SET_QUESTIONS, payload }),\n    setAnswer: payload => dispatch({ type: SET_ANSWER, payload }),\n    clear: payload => dispatch({ type: CLEAR }),\n    init: async () => {\n      const payload = await localForage.getItem(QUESTIONS_ORIGINAL);\n      dispatch({ type: SET_QUESTIONS, payload });\n    }\n  }), [dispatch]);\n}\n\nfunction useQuestion() {\n  return [useQuestionState(), useQuestionsActions()];\n}\n\nasync function getQuestionsFromCash(questionTypes = []) {\n  const questionsInProgress = await localForage.getItem(QUESTIONS_IN_PROGRESS);\n\n  if (questionsInProgress) {\n    return questionsInProgress;\n  }\n\n  const originalQuestions = await localForage.getItem(QUESTIONS_ORIGINAL);\n\n  if (originalQuestions) {\n    return originalQuestions;\n  }\n\n  throw new Error(`No questions found in Cash storage`);\n}\n\nexport {\n  QuestionProvider,\n  useQuestionState,\n  useQuestionDispatch,\n  useQuestion,\n  useQuestionsActions,\n};\n\n","import styled from 'styled-components';\n\nexport const Page = styled('section')`\n  background: #fff;\n  border-radius: 3px;\n  box-shadow: 1px 1px 1px 1px rgba(0,0,0,0.1);\n  padding: 20px 15px;\n  width: 100%;\n`;\n\nexport const PageGroup = styled('div')`\n  width: 100%;\n`;\n","import styled from 'styled-components';\n\nexport const Button = styled('button')`\n  border: 0;\n  outline: 0;\n  background: #E7ECF3;\n  color: #566588;\n  padding: 10px 30px;\n  border-radius: 3px;\n  font-size: 16px;\n  cursor: pointer;\n  text-transform: capitalize;\n  transition: .2s background;\n\n  &:hover {\n    background: #b8c4d6;\n  }\n`;\n\nexport const CancelButton = styled(Button)`\n  color: #fff;\n  background: #DC5454;\n\n  &:hover {\n    background: #b94141;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Main = styled('main')`\n  display: flex;\n  justify-content: center;\n  margin-top: 40px;\n  height: 100%;\n  flex: 1;\n  padding: 0 20px;\n  max-width: 1200px;\n  margin: 20px auto;\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport { useQuestionsActions } from 'features/question/question.store';\nimport { Page, Button, PageGroup } from 'components';\n\nexport function Home() {\n  console.log('::Homme')\n  const { init } = useQuestionsActions();\n  return (\n    <PageGroup>\n      <PageTitle>Interactive list of JavaScript Questions</PageTitle>\n      <Page>\n        <CardGroup>\n          <Title>What is this ?</Title>\n          <Description>\n            <p>\n              This is the interactive representation of \n              <a\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href=\"https://github.com/lydiahallie/javascript-questions\"\n              >\n              javascript-questions\n              </a> \n              repository. All questions are parsed from there.\n            </p>\n            <p>The source code of this app can be found here.</p>\n          </Description>\n          <LinkGroup>\n            <LinkItem to=\"/progress\">\n              <Button>Continue</Button>\n            </LinkItem>\n            <LinkItem to=\"/questions\">\n              <Button onClick={init}>Start new</Button>\n            </LinkItem>\n          </LinkGroup>\n        </CardGroup>\n      </Page>\n    </PageGroup>\n  );\n}\n\nconst PageTitle = styled('h2')`\n  text-align: center;\n  margin: 15px 0;\n  color: #5a5b5e;\n  padding: 0;\n`;\n\nconst LinkGroup = styled('div')`\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n\nconst LinkItem = styled(Link)`\n  margin: 7px 10px;\n`;\n\nconst CardGroup = styled('div')`\n  padding: 0;\n`;\n\nconst Title = styled('div')`\n  font-weight: 700;\n  font-size: 18px;\n  margin: 15px 0;\n`;\n\nconst Description = styled('div')`\n  color: #5a5b5e;\n `;","import React, { useEffect, useCallback, useMemo } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Highlight from 'react-highlight'\nimport localForage from 'localforage';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport isNil from 'lodash/isNil';\nimport { withRouter } from 'react-router-dom';\n\nimport { CancelButton, Button, PageGroup } from 'components';\nimport { optionClassName, scrollToTop } from 'utils';\nimport { useQuestion } from 'features/question/question.store';\n\nimport 'highlight.js/styles/atom-one-dark.css';\n\nfunction Resource({ history, match }) {\n  const [questionList, questionActions] = useQuestion();\n  const currentQuestionIndex = match.params.id ? parseInt(match.params.id - 1) : 0;\n  const question = questionList[currentQuestionIndex] || null;\n  \n  const userAnswerIndex = question && !isNil(question.userAnswerIndex)\n    ? question.userAnswerIndex\n    : null;\n\n  useEffect(() => {\n    localForage.setItem('questions/in-progress', questionList);\n  }, [questionList])\n\n  const onNextQuestion = useCallback(() => {\n    const nextQuestionIndex = (currentQuestionIndex + 1) % questionList.length;\n    history.push(`/questions/${nextQuestionIndex + 1}`);\n    scrollToTop(); \n  }, [currentQuestionIndex, history, questionList.length]);\n\n  const onPrevQuestion = useCallback(() => {\n    const prevQuestionIndex = (currentQuestionIndex - 1) % questionList.length;\n    history.push(`/questions/${prevQuestionIndex + 1}`);\n    scrollToTop(); \n  }, [currentQuestionIndex, history, questionList.length]);\n\n  const onAnswer = useCallback((answerIndex) => {\n    questionActions.setAnswer({ id: question.id, answerIndex });\n  }, [question, questionActions]);\n\n  const { correctQuestionsCount, wrongQuestionsCount } = useMemo(() => {\n    const [correctCount, wrongCount] = questionList.reduce((acc, q) => {\n      if (!isNil(q.userAnswerIndex)) {\n        acc[+!(q.answerIndex === q.userAnswerIndex)]++; // @TODO: refactor as it looks weird and unclear, but works :)\n      }\n      return acc;\n    }, [0, 0]);\n\n    return { correctQuestionsCount: correctCount, wrongQuestionsCount: wrongCount };\n  }, [questionList]);\n\n  return (\n    <PageGroup> \n      {\n        question !== null && (\n          <QuestionGroup>\n            <QuestionStatsGroup>\n              <QuestionStats>\n                <Correct>Correct: {correctQuestionsCount}</Correct>\n                <span>Wrong: {wrongQuestionsCount}</span>\n              </QuestionStats>\n              <QuestionNumber>Question: {currentQuestionIndex + 1} of {questionList.length}</QuestionNumber>\n            </QuestionStatsGroup>\n            <QuestionBody>\n              <QuestionTitle>{question.title}</QuestionTitle>\n              {!!question.code.length && question.code.map((code, index) => (\n                <QuestionAnswerGroup key={index}>\n                  <Highlight className=\"javascript\">{code}</Highlight>\n                </QuestionAnswerGroup>\n              ))}\n              <Options>\n                {\n                  question.options.map((o, i) => (\n                    <div\n                      key={o}\n                      className={optionClassName(userAnswerIndex, i, question.answerIndex)}\n                      onClick={userAnswerIndex === null ? () => onAnswer(i) : null}\n                    >\n                      <ReactMarkdown source={o} />\n                    </div>\n                  ))\n                }\n              </Options>\n              {\n                userAnswerIndex !== null && (\n                  <QuestionAnswerGroup>\n                    <h4>{question.answer}</h4>\n                    <Description>\n                      {\n                        question.description.map(o => typeof o === 'string' \n                          ? (\n                            <ReactMarkdown key={o} source={o} escapeHtml={false} />\n                          )\n                          : (\n                            <QuestionCodeGroup key={o}>\n                              <Highlight className=\"javascript\">{o.content}</Highlight>\n                            </QuestionCodeGroup>\n                          )\n                        )\n                      }\n                    </Description>\n                  </QuestionAnswerGroup>\n                )\n              }\n              <Actions>\n                <NavGroup>\n                  <CancelBtnGroup>\n                    <Link to=\"/\">\n                      <CancelButton>cancel</CancelButton>\n                    </Link>\n                  </CancelBtnGroup>\n                  <BtnGroup>\n                    <Link to=\"/progress\">\n                      <Button>progress</Button>\n                    </Link>\n                  </BtnGroup>\n                </NavGroup>\n              \n                <NavGroup>\n                  {currentQuestionIndex > 0 && (\n                    <BtnGroup>\n                      <Button onClick={onPrevQuestion}>prev</Button>\n                    </BtnGroup>\n                  )}\n                  {currentQuestionIndex < (questionList.length - 1) && (\n                    <BtnGroup>\n                      <Button onClick={onNextQuestion}>next</Button>\n                    </BtnGroup>\n                  )}\n                </NavGroup>\n              </Actions>\n            </QuestionBody>\n          </QuestionGroup>\n        )\n      }\n    </PageGroup>\n  );\n}\n\nconst Actions = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n\n  @media screen and (max-width: 616px) {\n    flex-direction: column-reverse;\n  }\n`;\n\nconst NavGroup = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n\n  @media screen and (max-width: 616px) {\n    justify-content: center;\n    width: 100%;\n  }\n`;\n\nconst BtnGroup = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n  margin: 25px 0 15px 20px;\n  \n  @media screen and (max-width: 616px) {\n    margin: 5px;\n  }\n`;\n\nconst CancelBtnGroup = styled(BtnGroup)`\n  margin-left: 0;\n`;\n\nconst Description = styled('div')`\n  line-height: 23px;\n\n  p code {\n    background: #eaeef3;\n    padding: 2px 3px 0;\n  }\n`;\n\nconst QuestionGroup = styled('div')`\n  max-width: 1200px;\n  width: 100%;\n  margin: 0 auto 50px;\n`;\n\nconst QuestionStatsGroup = styled('div')`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst QuestionStats = styled('div')`\n  opacity: .3;\n  padding: 7px 0;\n`;\n\nconst Correct = styled('span')`\n  margin-right: 10px;\n`;\n\nconst QuestionNumber = styled('div')`\n  opacity: .3;\n  padding: 7px 0;\n  text-align: right;\n`;\n\nconst QuestionBody = styled('div')`\n  background: #fff;\n  border-radius: 3px;\n  box-shadow: 1px 1px 1px 1px rgba(0,0,0,0.1);\n  padding: 2px 15px;\n`;\n\nconst QuestionTitle = styled('h3')`\n  margin: 15px 0;\n  line-height: 1;\n`;\n\nconst QuestionAnswerGroup = styled('div')`\n  border-top: 1px solid rgba(0,0,0, .1);\n  /* margin-top: 27px;   */\n`;\n\nconst QuestionCodeGroup = styled('div')`\n  margin: 0 0 15px;\n\n  pre {\n    margin: 0;\n  }  \n`;\n\nconst Options = styled('div')`\n  p {\n    cursor: pointer;\n    background: #f6f8fa;\n    padding: 13px;\n    border-radius: 3px;\n    border: 1px solid rgba(0,0,0, .1);\n    margin: 0 0 15px;\n    \n    &:hover {\n      background: #e9ebec;\n    }\n  }\n\n  .correct p {\n    color: #155724;\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n  }\n\n  .wrong p {\n    color: #721c24;\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n  }\n\n  .correct code {\n    background: #a5d6b1;\n  }\n\n  .wrong code {\n    background: #e4b4b8;\n  }\n\n  code {\n    background: #d6dade;\n    padding: 2px 3px 0;\n  }\n  \n`;\n\nexport default withRouter(Resource);","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport isNil from 'lodash/isNil';\n\nimport { useQuestion } from 'features/question/question.store';\nimport { Page, Button, CancelButton } from 'components';\nimport { scrollToTop } from 'utils';\n\nconst getStatus = ({ userAnswerIndex, answerIndex }) => {\n  if (isNil(userAnswerIndex)) return null;\n  if (userAnswerIndex === answerIndex) return 'valid';\n  return 'invalid';\n}\n\nexport function Progress() {\n  const [questionList] = useQuestion();\n  React.useEffect(() => void scrollToTop(), []);\n  // for dark theme https://dribbble.com/shots/7430090-Pagination , #293655\n  return (\n    <Page>\n      <CardGroup>\n        <Title>Progress</Title>\n        <QuestionGroup>\n          {questionList.map(question => (\n            <Link key={question.id} to={{ pathname: `/questions/${question.id + 1}`}}>\n              <Question status={getStatus(question)} >{question.id + 1}</Question>\n            </Link>\n          ))}\n        </QuestionGroup>\n        <Actions>\n          <Link to=\"/\">\n            <CancelButton>cancel</CancelButton>\n          </Link>\n        </Actions>\n      </CardGroup>\n    </Page>\n  );\n}\n\nconst Actions = styled('section')`\n  margin: 20px 0 0;\n`;\n\nconst QuestionGroup = styled('div')`\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));\n`;\n\nconst Question = styled(Button)`\n  width: 40px;\n  height: 40px;\n  padding: 0;\n  background: ${({ status }) => status === 'valid' ? '#65d68a' : status === 'invalid' ? '#dc5454' : '#E7ECF3'};\n  color: ${({ status }) => status ? '#fff' : '#566588'};\n`;\n\nconst CardGroup = styled('div')`\n  padding: 0;\n`;\n\nconst Title = styled('div')`\n  font-weight: 700;\n  font-size: 18px;\n  margin: 0 0 15px 0;\n`;\n","import React from 'react';\nimport { Home } from './pages';\nimport Questions from './pages/Questions';\nimport { Progress } from './pages/Progress';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nexport default function Router() {\n  console.log('router', Home);\n  return (\n    <HashRouter basename=\"/\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/questions/:id?\" component={Questions} />\n        <Route path=\"/progress\" component={Progress} />\n      </Switch>\n    </HashRouter>\n  )\n}","import React from 'react';\n\nimport Router from './Router';\nimport { QuestionProvider } from 'features/question/question.store';\nimport { Main } from 'components';\n\n// Add loading state on fetching\n// replace localforage with abstract service\n// Test if no internet and no data in local storage\n\nfunction App() {\n  console.log('App::')\n  return (\n    <QuestionProvider>\n      <Main>\n        <Router />\n      </Main>\n    </QuestionProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { isDev } from './utils';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif (isDev()) {\n  serviceWorker.unregister();\n} else {\n  serviceWorker.register();\n}\n"],"sourceRoot":""}